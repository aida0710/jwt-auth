openapi: 3.0.3
info:
  title: JWT Auth API
  description: RESTful API for managing accounts and projects
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.example.com/api/v1
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Auth
    description: Authentication endpoints
  - name: Accounts
    description: Account management endpoints
  - name: Projects
    description: Project management endpoints

paths:
  /health:
    get:
      operationId: GetHealth
      summary: Health check
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok

  /auth/signup:
    post:
      operationId: SignUp
      summary: Sign up a new account
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      operationId: Login
      summary: Login with email and password
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      operationId: RefreshToken
      summary: Refresh access token using refresh token
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      operationId: Logout
      summary: Logout and revoke refresh token
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /accounts:
    get:
      operationId: ListAccounts
      summary: List accounts
      tags:
        - Accounts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /accounts/{account_id}:
    get:
      operationId: GetAccount
      summary: Get an account by ID
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      operationId: UpdateAccount
      summary: Update an account
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: DeleteAccount
      summary: Delete an account
      tags:
        - Accounts
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
      responses:
        '204':
          description: Account deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /accounts/{account_id}/projects:
    post:
      operationId: CreateProject
      summary: Create a new project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      operationId: ListProjects
      summary: List projects for an account
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /accounts/{account_id}/projects/{project_id}:
    get:
      operationId: GetProject
      summary: Get a project by ID
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      operationId: UpdateProject
      summary: Update a project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
        - $ref: '#/components/parameters/ProjectID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      operationId: DeleteProject
      summary: Delete a project
      tags:
        - Projects
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AccountID'
        - $ref: '#/components/parameters/ProjectID'
      responses:
        '204':
          description: Project deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    AccountID:
      in: path
      name: account_id
      required: true
      schema:
        type: string
        format: uuid
      description: Account ID

    ProjectID:
      in: path
      name: project_id
      required: true
      schema:
        type: string
        format: uuid
      description: Project ID

  schemas:
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - email
        - name
        - created_at
        - updated_at

    UpdateAccountRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        account_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        name:
          type: string
          example: My Project
        description:
          type: string
          example: This is a sample project
        status:
          type: string
          enum: [active, inactive, archived]
          example: active
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - account_id
        - name
        - status
        - created_at
        - updated_at

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: My Project
        description:
          type: string
          example: This is a sample project
        status:
          type: string
          enum: [active, inactive, archived]
          example: active
      required:
        - name

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          example: My Updated Project
        description:
          type: string
          example: This is an updated project description
        status:
          type: string
          enum: [active, inactive, archived]
          example: active

    Error:
      type: object
      properties:
        error:
          type: string
          example: Error message
      required:
        - error

    SignUpRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: password123
        name:
          type: string
          example: John Doe
      required:
        - email
        - password
        - name

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: password123
      required:
        - email
        - password

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - refresh_token

    LogoutRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - refresh_token

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          example: 3600
          description: Access token expiration time in seconds
        account:
          $ref: '#/components/schemas/Account'
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
        - account

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Conflict with existing resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
