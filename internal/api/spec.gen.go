// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
