// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List accounts
	// (GET /accounts)
	ListAccounts(ctx echo.Context) error
	// Delete an account
	// (DELETE /accounts/{account_id})
	DeleteAccount(ctx echo.Context, accountId AccountID) error
	// Get an account by ID
	// (GET /accounts/{account_id})
	GetAccount(ctx echo.Context, accountId AccountID) error
	// Update an account
	// (PUT /accounts/{account_id})
	UpdateAccount(ctx echo.Context, accountId AccountID) error
	// List projects for an account
	// (GET /accounts/{account_id}/projects)
	ListProjects(ctx echo.Context, accountId AccountID) error
	// Create a new project
	// (POST /accounts/{account_id}/projects)
	CreateProject(ctx echo.Context, accountId AccountID) error
	// Delete a project
	// (DELETE /accounts/{account_id}/projects/{project_id})
	DeleteProject(ctx echo.Context, accountId AccountID, projectId ProjectID) error
	// Get a project by ID
	// (GET /accounts/{account_id}/projects/{project_id})
	GetProject(ctx echo.Context, accountId AccountID, projectId ProjectID) error
	// Update a project
	// (PUT /accounts/{account_id}/projects/{project_id})
	UpdateProject(ctx echo.Context, accountId AccountID, projectId ProjectID) error
	// Login with email and password
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Logout and revoke refresh token
	// (POST /auth/logout)
	Logout(ctx echo.Context) error
	// Refresh access token using refresh token
	// (POST /auth/refresh)
	RefreshToken(ctx echo.Context) error
	// Sign up a new account
	// (POST /auth/signup)
	SignUp(ctx echo.Context) error
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) ListAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAccounts(ctx)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccount(ctx, accountId)
	return err
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx, accountId)
	return err
}

// UpdateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAccount(ctx, accountId)
	return err
}

// ListProjects converts echo context to params.
func (w *ServerInterfaceWrapper) ListProjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListProjects(ctx, accountId)
	return err
}

// CreateProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProject(ctx, accountId)
	return err
}

// DeleteProject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", ctx.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProject(ctx, accountId, projectId)
	return err
}

// GetProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", ctx.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProject(ctx, accountId, projectId)
	return err
}

// UpdateProject converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId AccountID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "project_id" -------------
	var projectId ProjectID

	err = runtime.BindStyledParameterWithOptions("simple", "project_id", ctx.Param("project_id"), &projectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProject(ctx, accountId, projectId)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// RefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RefreshToken(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts", wrapper.ListAccounts)
	router.DELETE(baseURL+"/accounts/:account_id", wrapper.DeleteAccount)
	router.GET(baseURL+"/accounts/:account_id", wrapper.GetAccount)
	router.PUT(baseURL+"/accounts/:account_id", wrapper.UpdateAccount)
	router.GET(baseURL+"/accounts/:account_id/projects", wrapper.ListProjects)
	router.POST(baseURL+"/accounts/:account_id/projects", wrapper.CreateProject)
	router.DELETE(baseURL+"/accounts/:account_id/projects/:project_id", wrapper.DeleteProject)
	router.GET(baseURL+"/accounts/:account_id/projects/:project_id", wrapper.GetProject)
	router.PUT(baseURL+"/accounts/:account_id/projects/:project_id", wrapper.UpdateProject)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.POST(baseURL+"/auth/logout", wrapper.Logout)
	router.POST(baseURL+"/auth/refresh", wrapper.RefreshToken)
	router.POST(baseURL+"/auth/signup", wrapper.SignUp)
	router.GET(baseURL+"/health", wrapper.GetHealth)

}
